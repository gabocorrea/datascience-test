{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"data",
				"data_to_request"
			],
			[
				"predi",
				"predicted_output_filename_orders〔variable〕"
			],
			[
				"order",
				"orders_with_predictions.csv"
			],
			[
				"settin",
				"settings_output_orders_file〔variable〕"
			],
			[
				"sett",
				"settings_output_orders_file〔variable〕"
			],
			[
				"df_",
				"df_prediction_original〔variable〕"
			],
			[
				"read",
				"read_csv"
			],
			[
				"seting",
				"settings_verbose〔variable〕"
			],
			[
				"df",
				"df_prediction〔variable〕"
			],
			[
				"predicte",
				"predicted_output_filename〔variable〕"
			],
			[
				"y_pre",
				"y_prediction"
			],
			[
				"X",
				"X_prediction"
			],
			[
				"x",
				"xlabel〔function〕"
			],
			[
				"tota",
				"total_minutes_predicted"
			],
			[
				"multi",
				"multiprocessing〔directory〕"
			],
			[
				"setti",
				"settings_scale〔variable〕"
			],
			[
				"Linea",
				"LinearRegression〔module〕"
			],
			[
				"Lin",
				"LinearSVR"
			],
			[
				"y_",
				"y_pred"
			],
			[
				"y_tr",
				"y_true"
			],
			[
				"clas",
				"classification_report"
			],
			[
				"file",
				"filename_out〔variable〕"
			],
			[
				"y",
				"y_test"
			],
			[
				"croo",
				"cross_val_score〔module〕"
			],
			[
				"train",
				"train_test_split"
			],
			[
				"cross_",
				"cross_validation〔module〕"
			],
			[
				"p",
				"preprocessing〔module〕"
			],
			[
				"goog",
				"google_eta_table〔variable〕"
			],
			[
				"goo",
				"google_eta"
			],
			[
				"gmap",
				"gmap_ans〔variable〕"
			],
			[
				"poi",
				"point_B〔variable〕"
			],
			[
				"ori",
				"origin〔variable〕"
			],
			[
				"func",
				"Funcion1_aux"
			],
			[
				"Fun",
				"Funcion1_aux"
			],
			[
				"uni",
				"unittest〔module〕"
			],
			[
				"ans",
				"answer_type〔argument〕"
			],
			[
				"url",
				"urllib3"
			],
			[
				"api",
				"api_key"
			],
			[
				"poin",
				"point_B〔argument〕"
			],
			[
				"base",
				"base_url"
			],
			[
				"store",
				"store_branch_id"
			],
			[
				"lng",
				"lng_store"
			],
			[
				"shopper",
				"shopper_id"
			],
			[
				"filepa",
				"filepath_stores〔variable〕"
			],
			[
				"filepath",
				"filepath_shoppers〔variable〕"
			],
			[
				"temp",
				"temp_table〔variable〕"
			],
			[
				"numpro",
				"num_products_table〔variable〕"
			],
			[
				"num",
				"num_products_KG"
			],
			[
				"num_pro",
				"num_products_table"
			],
			[
				"nump",
				"num_products_table〔variable〕"
			],
			[
				"query",
				"query_result〔variable〕"
			],
			[
				"orde",
				"order_id"
			],
			[
				"row",
				"row_orders"
			],
			[
				"filepro",
				"filepath_products"
			],
			[
				"svm",
				"svm_classifier\tstatement"
			],
			[
				"load_di",
				"load_digits\tfunction"
			],
			[
				"false",
				"False\tkeyword"
			],
			[
				"stock",
				"StockList\tclass"
			],
			[
				"for",
				"format_suffix_patterns\tfunction"
			],
			[
				"Stock",
				"StockSerializer\tclass"
			],
			[
				"S",
				"StockSerializer\tclass"
			],
			[
				"view",
				"views\tmodule"
			],
			[
				"res",
				"rest_framework\tmodule"
			],
			[
				"floa",
				"FloatField\tclass"
			],
			[
				"albumup",
				"AlbumUpdate\tclass"
			],
			[
				"reverse",
				"reverse_lazy\tfunction"
			],
			[
				"conte",
				"context_object_name\tstatement"
			],
			[
				"Album",
				"AlbumCreate\tclass"
			],
			[
				"detail",
				"detailview\tDetailView"
			],
			[
				"all",
				"all_albums"
			],
			[
				"template",
				"template_name\tstatement"
			],
			[
				"lis",
				"ListView\tclass"
			],
			[
				"fon",
				"font-family"
			],
			[
				"gly-cd",
				"glyphicon-collapse-down \tBootstrap 3 Class"
			],
			[
				"navba",
				"navbar-form \tBootstrap 3 Class"
			],
			[
				"navbar",
				"navbar-brand \tBootstrap 3 Class"
			],
			[
				"wid",
				"width\tAttr"
			],
			[
				"selec",
				"selected_song\tstatement"
			],
			[
				"ALBU",
				"album"
			],
			[
				"albu",
				"album_id\tparam"
			],
			[
				"get",
				"get_object_or_404\tfunction"
			],
			[
				"htt",
				"Http404"
			]
		]
	},
	"buffers":
	[
		{
			"file": "src/preprocess.py",
			"settings":
			{
				"buffer_size": 4630,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression, Lasso\nfrom sklearn.svm import LinearSVR, SVR, NuSVR\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.metrics import  mean_squared_error, r2_score\nimport pickle, os, math\nimport matplotlib.pyplot as plt\nfrom tabulate import tabulate\n\n# columns used from input .csv file\nselected_columns = 'google_eta,num_products_KG,num_products_UN,picking_speed,dow,on_demand,total_minutes'.split(',')\n\n# show plots\nsettings_plot = False\n\n# test size (in %)\nsettings_crossvalidation_test_size = 0.3\n\n# filename of the classifier that is stored with pickle\nsettings_model_filename = 'LinearRegression'\n\n# normalize all values\nsettings_scale = False\n\n# should on_demand column be converted to 0 or 1 ?\nsettings_convert_bool_to_number = False\n\n\n# random seed for test-train split\nsettings_crossvalidation_random_seed = 1\n\n# save a file with the model info\nsettings_classifier_stats = True\n\n# create a file similar to orders.csv, but with prediccions on it\nsettings_output_orders_file = True\n\n# :: last_column is the one being predicted\nlast_column = selected_columns[-1]\n\n\n\n\ntrain_filename = '../data/pd_data_train.csv'\ntest_filename = '../data/pd_data_unknown.csv'\npredicted_output_filename = 'predictions/predictions.csv'\npredicted_output_filename_orders = 'predictions/orders_with_predictions.csv'\n\n\n\n\n# read data from .csv\ndf = pd.read_csv(train_filename)\ndf = df[selected_columns]\n\n\n\n# convert True and False to 1 and 0\nif settings_convert_bool_to_number:\n    df['on_demand'] = df['on_demand'].apply(lambda x: 1 if x==True else 0)\n\n\n\n\n# :: set X and y\nX = np.array(df.drop(columns=last_column))\nif settings_scale:\n    X = preprocessing.scale(X)\ny = np.array(df[last_column])\n\n\n\n# split to train and test parts\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=settings_crossvalidation_test_size, random_state=settings_crossvalidation_random_seed)\n\n\n\n\n# train classifier\nclf = LinearRegression()\nclf.fit(X_train, y_train)\n\n\n\n# test classifier\ny_true, y_pred = y_test, clf.predict(X_test)\ndf_test_pred = pd.DataFrame([], columns=['total_minutes','total_minutes_predicted','diff'])\ndf_test_pred['total_minutes'] = pd.Series(y_true)\ndf_test_pred['total_minutes_predicted'] = pd.Series(y_pred)\ndf_test_pred['diff'] = pd.Series(y_pred) - pd.Series(y_true)\n\n\n\n# save model to a file. Auto-generates a new name for each file (No replacing)\nfilename_out = ''\nfor i in range(1000):\n    filename_out = 'classifiers/'+str(settings_model_filename) + '{0:0=3d}'.format(i) + '.pickle'\n    if os.path.exists(filename_out) == False:\n        with open(filename_out, 'wb') as f:\n            pickle.dump(clf, f)\n        \n\n\n        # Write model info to a file\n        if settings_classifier_stats:\n\n            filename_out = 'classifiers/'+str(settings_model_filename) + '{0:0=3d}'.format(i) + '.txt'\n            with open(filename_out, 'w') as f:\n                \n                f.write('Linear Ecuation of the Model:\\n')\n\n                L0 = list(zip(df.columns,clf.coef_))\n                L0.append( ['constant',str(clf.intercept_)] )\n                f.write( tabulate( L0 ) )\n\n\n                L = [\n                    ['r' + u'\\u00B2' + ' score', str(clf.score(X_test, y_test)) ] ,\n                    ['mean error', str(math.sqrt(  mean_squared_error(y_test, y_pred)  )) ],\n                    ['explained_variance', str(sum(cross_val_score(clf, X_test, y_test, scoring='explained_variance')) / 3) ],\n                    ['neg_mean_absolute_error', str(sum(cross_val_score(clf, X_test, y_test, scoring='neg_mean_absolute_error')) / 3) ] ,\n                    ['neg_mean_squared_error',  str(sum(cross_val_score(clf, X_test, y_test, scoring='neg_mean_squared_error')) / 3)] ,\n                    ['neg_mean_squared_log_error', str(sum(cross_val_score(clf, X_test, y_test, scoring='neg_mean_squared_log_error')) / 3) ] ,\n                    ['neg_median_absolute_error', str(sum(cross_val_score(clf, X_test, y_test, scoring='neg_median_absolute_error')) / 3) ]\n                ]\n                f.write('\\n\\n\\n\\n\\n')\n                f.write( tabulate(L, headers=['Metric','Value']))\n\n                f.write('\\n\\n\\n\\n\\nSome Predictions:\\n')\n                f.write(str(df_test_pred))\n\n        break\n\n\n\n\n\nX_test = pd.DataFrame(X_test)\ny_test = pd.DataFrame(y_test)\n\n\n\n\n\n# :: Plot ::\nif settings_plot:\n    X_test.columns = selected_columns[:-1]\n    for col in X_test.columns:\n        plt.scatter(X_test[col] ,df_test_pred['total_minutes'], marker='.', s=1)\n        plt.scatter(X_test[col] ,df_test_pred['total_minutes_predicted'], marker='x', s=1)\n        plt.xlabel(col)\n        plt.legend(loc=2)\n        plt.show()\n\n\n\n\n\n\n# predict values. read data from .csv first\ndf_prediction_original = pd.read_csv(test_filename)\ndf_prediction = df_prediction_original[selected_columns]\n\nX_prediction = np.array(df_prediction.drop(columns=last_column))\ny_prediction = clf.predict(X_prediction)\n\ndf_prediction_original[last_column] = y_prediction\ndf_prediction_original[last_column] = df_prediction_original[last_column].round(6)\n\n\n\n\n\n\n\n\n\n# Crear un archivo similar a pd_data_unknown.csv, con los datos predecidos\nif not os.path.exists(predicted_output_filename):\n    os.makedirs(predicted_output_filename.split('/')[0])\ndf_prediction_original.to_csv(predicted_output_filename, index=False)\n\n\n\n\n\n\n\n\n# Crear un archivo similar al original (orders.csv), con los datos predecidos\nif settings_output_orders_file:\n    df = pd.read_csv('../data/orders.csv')\n    df = pd.DataFrame(df)\n    df = pd.merge(df.drop(columns=last_column), df_prediction_original[['order_id',last_column]], how='outer', left_on='order_id', right_on='order_id')\n    df.to_csv(predicted_output_filename_orders, index=False)\n",
			"file": "src/train_and_predict.py",
			"file_size": 6027,
			"file_write_time": 131563789047473344,
			"settings":
			{
				"buffer_size": 5825,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "preguntas-pendientes.txt",
			"settings":
			{
				"buffer_size": 363,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/googlemapsutil.py",
			"settings":
			{
				"buffer_size": 2268,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "Packages/Python/Python.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Anaconda Python Builder",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Anaconda Python Builder",
				""
			]
		],
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 269.0,
		"last_filter": "painsta",
		"selected_items":
		[
			[
				"painsta",
				"Package Control: Install Package"
			],
			[
				"packdisa",
				"Package Control: Disable Package"
			],
			[
				"packin",
				"Package Control: Install Package"
			],
			[
				"pacdesa",
				"Package Control: Disable Package"
			],
			[
				"pacdis",
				"Package Control: Disable Package"
			],
			[
				"packaonre",
				"Package Control: Remove Package"
			],
			[
				"Snippet: ",
				"Snippet: View"
			],
			[
				"pacinsta",
				"Package Control: Install Package"
			],
			[
				"apcka",
				"Package Control: List Packages"
			],
			[
				"packacontr",
				"Package Control: Remove Package"
			],
			[
				"packinsta\t",
				"Package Control: Install Package"
			],
			[
				"packacon",
				"Package Control: Remove Package"
			],
			[
				"instal\t",
				"Package Control: Install Package"
			],
			[
				"new",
				"Django: New App"
			],
			[
				"django",
				"Django: New App"
			],
			[
				"djannew",
				"Django: New Project"
			],
			[
				"packalis",
				"Package Control: List Packages"
			],
			[
				"sniht",
				"Snippet: html"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"packremo",
				"Package Control: Remove Package"
			],
			[
				"pckainsta\t",
				"Package Control: Install Package"
			],
			[
				"packdis",
				"Package Control: Disable Package"
			],
			[
				"packrem",
				"Package Control: Remove Package"
			],
			[
				"pacenabl",
				"Package Control: Enable Package"
			],
			[
				"packacins",
				"Package Control: Install Package"
			],
			[
				"packcon",
				"Package Control: Enable Package"
			],
			[
				"PACKAINGN",
				"Package Control: List Unmanaged Packages"
			],
			[
				"packageconre",
				"Package Control: Remove Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"install\t",
				"Package Control: Install Package"
			],
			[
				"packa",
				"Preferences: Browse Packages"
			],
			[
				"pep",
				"Anaconda: Autoformat PEP8 Errors"
			],
			[
				"packlis\t",
				"Package Control: List Packages"
			],
			[
				"packains\t",
				"Package Control: Install Package"
			],
			[
				"packalis\t",
				"Package Control: List Packages"
			],
			[
				"mark",
				"Markdown Preview: Preview in Browser"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"insta\t",
				"Package Control: Install Package"
			],
			[
				"pack",
				"Install Package Control"
			]
		],
		"width": 444.0
	},
	"console":
	{
		"height": 148.0,
		"history":
		[
			"a",
			"a = 1",
			"a",
			"import socket; socket.socket(socket.AF_INET, socket.SOCK_STREAM).connect((\"localhost\", 52313))"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/gabo/Documents/dev/data science/datascience-test",
		"/C/Users/gabo/Documents/dev/data science/datascience-test/data",
		"/C/Users/gabo/Documents/dev/data science/datascience-test/src",
		"/C/Users/gabo/Documents/dev/data science/datascience-test/src/classifiers",
		"/C/Users/gabo/Documents/dev/data science/datascience-test/src/predictions"
	],
	"file_history":
	[
		"/C/Users/gabo/Documents/dev/data science/datascience-test/data/storebranch.csv",
		"/C/Users/gabo/Documents/dev/data science/datascience-test/README.md",
		"/C/Users/gabo/Documents/dev/data science/datascience-test/src/googlemapsutil.py",
		"/C/Users/gabo/Documents/dev/data science/datascience-test/src/classifiers/LinearRegression001.txt",
		"/C/Users/gabo/Documents/dev/data science/datascience-test/src/classifiers/LinearRegression000.txt",
		"/C/Users/gabo/Documents/dev/data science/datascience-test/data/orders.csv",
		"/C/Users/gabo/Documents/dev/data science/datascience-test/src/predictions/orders_with_predictions.csv",
		"/C/Users/gabo/Documents/dev/data science/datascience-test/src/classifiers/LinearRegression012.txt",
		"/C/Users/gabo/Documents/dev/data science/datascience-test/data/pd_data_unknown.csv",
		"/C/Users/gabo/Documents/dev/data science/datascience-test/data/pd_data_train.csv",
		"/C/Users/gabo/Documents/dev/data science/datascience-test/src/out.txt",
		"/C/Users/gabo/Documents/dev/data science/datascience-test/src/log.txt",
		"/C/Users/gabo/Documents/dev/data science/datascience-test/src/predictions/predictions.csv",
		"/C/Users/gabo/Documents/dev/data science/datascience-test/src/classifiers/LinearRegression001.pickle",
		"/C/Users/gabo/Documents/dev/data science/sklearn-tutorial/2_YT_sentdex.py",
		"/C/Users/gabo/Documents/dev/data science/sklearn-tutorial/1_sklearn.py",
		"/C/Users/gabo/Documents/dev/data science/datascience-test/data/shoppers.csv",
		"/C/Users/gabo/Documents/dev/data science/datascience-test/.gitignore",
		"/C/Users/gabo/Documents/dev/data science/datascience-test/src/classifiers/LinearRegression003.pickle",
		"/C/Users/gabo/Documents/dev/data science/datascience-test/data/pd_data_test.csv",
		"/C/Users/gabo/Documents/dev/data science/datascience-test/src/pd_data_train.csv",
		"/C/Users/gabo/Documents/dev/data science/datascience-test/src/pd_data_test.csv",
		"/C/Users/gabo/Documents/dev/data science/pandas-tutorial/orders - training.csv",
		"/C/Users/gabo/Documents/dev/data science/datascience-test/src/__pycache__/googlemapsutil.cpython-36.pyc",
		"/C/Users/gabo/Documents/dev/data science/datascience-test/src/googlemapsutil_test.py",
		"/C/Users/gabo/Downloads/getonbrd.txt",
		"/C/Users/gabo/Downloads/ej3.c",
		"/C/Users/gabo/Downloads/ej2.c",
		"/C/Users/gabo/Downloads/ej1.c",
		"/C/Users/gabo/Documents/dev/data science/datascience-test/src/googlemapsutil_test",
		"/C/Users/gabo/Documents/dev/data science/datascience-test/data/order_product.csv",
		"/C/Users/gabo/Documents/dev/data science/pandas-tutorial/hubble_data_no_headers.csv",
		"/C/Users/gabo/Documents/dev/data science/pandas-tutorial/1.py",
		"/C/Users/gabo/Documents/U - UNAB/Fundamentos de Programacion/Fundamentos 2016/Clases/clase16/out.txt",
		"/C/Users/gabo/Documents/U - UNAB/Fundamentos de Programacion/Fundamentos 2016/Clases/clase 17/17.0.c",
		"/C/Users/gabo/Documents/U - UNAB/Fundamentos de Programacion/Fundamentos 2016/Clases/clase15/15.0.c",
		"/C/Users/gabo/Documents/U - UNAB/Fundamentos de Programacion/Fundamentos 2016/Clases/clase16/16.1.c",
		"/C/Users/gabo/Documents/U - UNAB/Fundamentos de Programacion/Fundamentos 2016/Clases/clase16/16.0.c",
		"/C/Users/gabo/Documents/dev/data science/datascience-test/src/1_test.py",
		"/C/Users/gabo/AppData/Roaming/Sublime Text 3/Packages/User/sublime_jedi.sublime-settings",
		"/C/Users/gabo/AppData/Roaming/Sublime Text 3/Packages/Jedi - Python autocompletion/sublime_jedi.sublime-settings",
		"/C/Users/gabo/AppData/Roaming/Sublime Text 3/Packages/User/Default.sublime-keymap",
		"/C/Users/gabo/AppData/Roaming/Sublime Text 3/Packages/Jedi - Python autocompletion/Default.sublime-keymap",
		"/C/Users/gabo/Downloads/libreria.h",
		"/C/Users/gabo/Downloads/EjemploDeUso.c",
		"/C/Users/gabo/Downloads/main.py",
		"/C/Users/gabo/Documents/dev/data science/datascience-test/data/orders_training_filtered.csv",
		"/C/Users/gabo/Documents/dev/data science/datascience-test/data/orders - training.csv",
		"/C/Users/gabo/Documents/dev/data science/datascience-test/data/orders_training.csv.arff",
		"/C/Users/gabo/Documents/dev/data science/datascience-test/data/orders - test.csv",
		"/C/Users/gabo/Documents/dev/data science/datascience-test/preguntas-pendientes.txt",
		"/C/Users/gabo/Documents/Django Projects/Tutorials/Tutorial 002 REST/website/companies/views.py",
		"/C/Users/gabo/Documents/Django Projects/Tutorials/Tutorial 002 REST/website/companies/models.py",
		"/C/Users/gabo/Documents/Django Projects/Tutorials/Resumen de Tutoriales de Django.md",
		"/C/Users/gabo/Downloads/req.txt",
		"/C/Users/gabo/Downloads/storebranch.txt",
		"/C/Users/gabo/Downloads/storebranch - Copy.csv",
		"/C/Users/gabo/Downloads/shoppers.txt",
		"/C/Users/gabo/Downloads/order_product.txt",
		"/C/Users/gabo/Downloads/orders.txt",
		"/C/Users/gabo/Downloads/orders.csv",
		"/C/Users/gabo/Downloads/storebranch.csv",
		"/C/Users/gabo/Downloads/shoppers.csv",
		"/C/Users/gabo/Downloads/order_product.csv",
		"/C/Users/gabo/Documents/Django Projects/Tutorials/Tutorial 002 REST/website/companies/serializers.py",
		"/C/Users/Public/Documents/Unity Projects/MyUnityGames/I Can Jump!/Assets/Code/GroundCheck.cs",
		"/C/Users/Public/Documents/Unity Projects/MyUnityGames/I Can Jump!/Assets/Code/Charger.cs",
		"/C/Users/Public/Documents/Unity Projects/MyUnityGames/I Can Jump!/Assets/Code/Camera2DZoomOutWhenJumping.cs",
		"/C/Users/Public/Documents/Unity Projects/MyUnityGames/I Can Jump!/Assets/Code/TimeController.cs",
		"/C/Users/Public/Documents/Unity Projects/MyUnityGames/I Can Jump!/Assets/Code/SmoothFollow.cs",
		"/C/Users/Public/Documents/Unity Projects/MyUnityGames/I Can Jump!/Assets/Code/PlayerAnimations.cs",
		"/C/Users/Public/Documents/Unity Projects/MyUnityGames/I Can Jump!/Assets/Code/Unique.cs",
		"/C/Users/Public/Documents/Unity Projects/MyUnityGames/I Can Jump!/Assets/Code/GameController.cs",
		"/C/Users/Public/Documents/Unity Projects/MyUnityGames/I Can Jump!/Assets/Code/HeartsHPUI.cs",
		"/C/Users/gabo/Documents/Django Projects/Tutorials/Tutorial 002 REST/website/website/urls.py",
		"/C/Users/gabo/Documents/Django Projects/Tutorials/Tutorial 002 REST/website/companies/admin.py",
		"/C/Users/gabo/Documents/Django Projects/Tutorials/Tutorial 002 REST/website/website/settings.py",
		"/C/Users/gabo/Documents/Django Projects/Tutorials/Tutorial 002 REST/website/website/__init__.py",
		"/C/Users/gabo/Documents/Django Projects/Tutorials/Tutorial 001/website/music/templates/music/index.html",
		"/C/Users/gabo/Documents/Django Projects/Tutorials/Tutorial 001/website/music/urls.py",
		"/C/Users/gabo/Documents/Django Projects/Tutorials/Tutorial 001/website/music/views.py",
		"/C/Users/gabo/Documents/Django Projects/Tutorials/Tutorial 001/website/music/templates/music/album_form.html",
		"/C/Users/gabo/Documents/Django Projects/Tutorials/Tutorial 001/website/music/templates/music/form-template.html",
		"/C/Users/gabo/Documents/Django Projects/Tutorials/Tutorial 001/website/music/static/music/style.css",
		"/C/Users/gabo/Documents/Django Projects/Tutorials/Tutorial 001/website/music/models.py",
		"/C/Users/gabo/Documents/Django Projects/Tutorials/Tutorial 001/website/music/templates/music/detail.html",
		"/C/Users/gabo/Documents/Django Projects/Tutorials/Tutorial 001/website/music/templates/music/base.html",
		"/C/Users/gabo/Documents/Django Projects/Tutorials/Tutorial 001/website/music/apps.py",
		"/C/Users/gabo/Downloads/bg.jpg",
		"/C/Users/gabo/Documents/Django Projects/Tutorials/Tutorial 001/website/music/admin.py",
		"/C/Users/gabo/Documents/Django Projects/Tutorials/Tutorial 001/website/music/tests.py"
	],
	"find":
	{
		"height": 41.0
	},
	"find_in_files":
	{
		"height": 104.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"Process",
			"get_duration",
			",",
			"datapath",
			"settings_output_orders_file",
			"settings_classifier_stats",
			"print",
			"settings_verbose",
			"test_filename",
			"pd_data",
			"- test",
			"0f031690e55b1c010aaa6e8023bb02ba",
			"828021ba0dd464537cf1db4f16a90cf5",
			"c3aa2be4956b984fe5edec2b47ed5cf3",
			"407703c42dd95fe9a2333f4ecc3937dc",
			"drop",
			"read_csv",
			"df_pred",
			"settings_plot",
			"mean_squared_error",
			"b59e4299d17841d3f805866677d952e9",
			",52\\d\\d",
			" ",
			"model_filename",
			"target",
			"FIRST_N_ROWS",
			"get_duration_in_traffic",
			"_send_request",
			",",
			"point_B",
			"point_A",
			"25b1e6be606fe62b5770a5bfaf25bfec",
			"ba0018f165d20dcee11463e10a6da3ed",
			"452ae015bf846e1d2932b7ea15720d64",
			"9d65282d498c0338377867996e761399",
			"452ae015bf846e1d2932b7ea15720d64",
			"044d56734d20e04984d846dade6d39f3",
			"head",
			"6abd5e28d01b7c733fe37485294235dc",
			"bdfc44fb525986b7bab8c589fc47e853",
			"6abd5e28d01b7c733fe37485294235dc",
			"bdfc44fb525986b7bab8c589fc47e853",
			"6abd5e28d01b7c733fe37485294235dc\t",
			"filepaths_list",
			"\n",
			",\n",
			",",
			",\n",
			",",
			"(",
			"(1)",
			"(",
			"favori",
			"active",
			"template_name",
			"topNavBar"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			""
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/preprocess.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4630,
						"regions":
						{
						},
						"selection":
						[
							[
								3254,
								3258
							]
						],
						"settings":
						{
							"auto_complete": false,
							"syntax": "Packages/MagicPython/grammars/MagicPython.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3142.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/train_and_predict.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5825,
						"regions":
						{
						},
						"selection":
						[
							[
								1209,
								1209
							]
						],
						"settings":
						{
							"auto_complete": false,
							"open_with_edit": true,
							"syntax": "Packages/MagicPython/grammars/MagicPython.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 120.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "preguntas-pendientes.txt",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 363,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/googlemapsutil.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2268,
						"regions":
						{
						},
						"selection":
						[
							[
								1467,
								1479
							]
						],
						"settings":
						{
							"syntax": "Packages/MagicPython/grammars/MagicPython.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 28.0
	},
	"input":
	{
		"height": 43.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 606.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "datascience-test.sublime-project",
	"replace":
	{
		"height": 52.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"py",
				"src\\train_and_predict.py"
			],
			[
				"pre",
				"src\\preprocess.py"
			],
			[
				"goo",
				"src\\googlemapsutil.py"
			],
			[
				"linea",
				"src\\classifiers\\LinearRegression001.txt"
			],
			[
				"log",
				"src\\log.txt"
			],
			[
				"1",
				"src\\1_test.py"
			],
			[
				"lo",
				"src\\log.txt"
			],
			[
				"shop",
				"data\\shoppers.csv"
			],
			[
				"pd",
				"data\\pd_data_train.csv"
			],
			[
				"2",
				"C:\\Users\\gabo\\Documents\\dev\\data science\\sklearn-tutorial\\2_YT_sentdex.py"
			],
			[
				"ou",
				"src\\out.txt"
			],
			[
				"te",
				"src\\1_test.py"
			],
			[
				"tes",
				"src\\1_test.py"
			],
			[
				"googl",
				"src\\googlemapsutil.py"
			],
			[
				"out",
				"src\\out.txt"
			],
			[
				"order",
				"data\\orders.csv"
			],
			[
				"test",
				"src\\1_test.py"
			],
			[
				"store",
				"data\\storebranch.csv"
			],
			[
				"orde",
				"data\\orders.csv"
			],
			[
				"shopp",
				"data\\shoppers.csv"
			],
			[
				"16",
				"C:\\Users\\gabo\\Documents\\U - UNAB\\Fundamentos de Programacion\\Fundamentos 2016\\Clases\\clase16\\16.0.c"
			],
			[
				"or",
				"C:\\Users\\gabo\\Documents\\dev\\data science\\pandas-tutorial\\orders - training.csv"
			],
			[
				"model",
				"companies\\models.py"
			],
			[
				"url",
				"website\\urls.py"
			],
			[
				"admin",
				"companies\\admin.py"
			],
			[
				"vie",
				"music\\views.py"
			],
			[
				"mode",
				"music\\models.py"
			],
			[
				"vi",
				"music\\views.py"
			],
			[
				"inde",
				"music\\templates\\music\\index.html"
			],
			[
				"app",
				"music\\apps.py"
			],
			[
				"deta",
				"music\\templates\\music\\detail.html"
			],
			[
				"st",
				"music\\static\\music\\style.css"
			],
			[
				"view",
				"music\\views.py"
			],
			[
				"html",
				"music\\templates\\music\\detail.html"
			],
			[
				"style",
				"music\\static\\music\\style.css"
			],
			[
				"de",
				"music\\templates\\music\\detail.html"
			],
			[
				"ur",
				"music\\urls.py"
			],
			[
				"models",
				"music\\models.py"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"C:\\Users\\gabo\\Documents\\Django Projects\\Tutorials\\Tutorial 001\\website\\tutorial_001_djangobasics.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 242.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
